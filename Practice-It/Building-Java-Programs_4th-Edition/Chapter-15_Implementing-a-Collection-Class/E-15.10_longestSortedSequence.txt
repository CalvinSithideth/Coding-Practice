/*
BJP4 Exercise 15.10: longestSortedSequence
Assignment: 

Write a method longestSortedSequence that returns the length of
the longest sorted sequence within a list of integers.

For example, if a variable called list stores the following sequence of values:

[1, 3, 5, 2, 9, 7, -3, 0, 42, 308, 17]

then the call: list.longestSortedSequence() would return the value 4 because it is
the length of the longest sorted sequence within this list (the sequence -3, 0, 42, 308).

If the list is empty, your method should return 0.

Notice that for a non-empty list the method will always return a value of at least 1 because
any individual element constitutes a sorted sequence.

Assume you are adding to the ArrayIntList class with following fields & methods:


public class ArrayIntList {
    private int[] elementData;
    private int size;
    
    public void remove(int index) { ... }

    // your code goes here
}


Solution (partial class problem):
*/


public int longestSortedSequence() {
    
    // Return 0 if empty
    if ( size < 1 ) {
        return 0;
    }
    
    int longestSequence = 1;
    int currentSequence = 1;
    int previousValue = elementData[0];
    
    for (int i = 1; i < size; i++) {
        
        // Sequence is not broken; Set values and increment
        if (elementData[i] >= previousValue) {
            previousValue = elementData[i];
            currentSequence++;
        }
        else { // Current sequence is broken; Compare and reset
            if (currentSequence > longestSequence) {
                longestSequence = currentSequence;
            }
            currentSequence = 1;
            previousValue = elementData[i];
        }
        
    }
    
    // Check sequences one last time
    if (currentSequence > longestSequence) {
        longestSequence = currentSequence;
    }
    
    return longestSequence;
    
}

