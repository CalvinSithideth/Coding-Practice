/*
BJP4 Exercise 17.20: makePerfect
Assignment: 

Write a method makePerfect that could be added to the IntTree class.

The method should add nodes until the binary tree is a "perfect" tree.

A perfect binary tree is one where all leaves are at the same level.

Another way of thinking of it is that you are adding dummy nodes to the tree until
every path from the root to a leaf is the same length.

A perfect tree's shape is exactly triangular and every branch node has exactly two children.
Each node you add to the tree should store the value 0.


The following table shows the results of a call of your method on a particular IntTree variable named tree:

IntTree tree = new IntTree();
...
tree.makePerfect();


before call
                 +----+
                 | 67 |
                 +----+
              /          \
           /                \
      +----+                +----+
      | 80 |                | 52 |
      +----+                +----+
     /      \              /
    /        \            /
+----+     +----+      +----+
| 16 |     | 21 |      | 99 |
+----+     +----+      +----+
            /  \           \
           /    \           \
       +----+  +----+      +----+
       | 45 |  | 33 |      | 67 |
       +----+  +----+      +----+


after call
                        +----+
                        | 67 |
                        +----+
                    /             \
                /                     \
           +----+                     +----+
           | 80 |                     | 52 |
           +----+                     +----+
         /        \                 /        \
       /            \             /            \
   +----+         +----+       +----+        +----+
   | 16 |         | 21 |       | 99 |        |  0 |
   +----+         +----+       +----+        +----+
   /    \         /    \       /    \        /     \
  /      \       /      \     /      \      /       \
+----+ +----+ +----+ +----+ +----+ +----+ +----+ +----+
|  0 | |  0 | | 45 | | 33 | |  0 | | 67 | |  0 | |  0 |
+----+ +----+ +----+ +----+ +----+ +----+ +----+ +----+


Solution (partial class problem):
*/


// WRITE YOUR CODE HERE
public void makePerfect() {
    overallRoot = makePerfect( overallRoot, height() );
}

private IntTreeNode makePerfect( IntTreeNode root, int height ) {
    if ( height <= 0 ) { // Base case
        return null;
    }
    if ( root == null ) { // Node does not exist but height is over 0
        root = new IntTreeNode(0);
    }
    root.left = makePerfect( root.left, height - 1 );
    root.right = makePerfect( root.right, height - 1);
    return root;
}

// LEAVE THESE METHODS HERE, TO USE AS HELPERS
public int height() {
    return height(overallRoot);
}

private int height(IntTreeNode root) {
    if (root == null) {
        return 0;
    } else {
        return 1 + Math.max(height(root.left), height(root.right));
    }
}
